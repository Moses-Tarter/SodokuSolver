import numpy as np

solved_row_col = sorted(np.array([1, 2, 3, 4, 5, 6, 7, 8, 9]))
# example for non valid solution - need to solve
sample_board = np.array((
    [0, 2, 7, 1, 5, 0, 3, 9, 6],
    [9, 6, 5, 3, 2, 7, 0, 4, 0],
    [3, 4, 1, 6, 8, 9, 7, 0, 2],
    [0, 9, 3, 4, 6, 8, 2, 7, 1],
    [0, 7, 2, 5, 0, 3, 0, 8, 9],
    [0, 1, 0, 9, 0, 2, 4, 3, 5],
    [0, 0, 6, 2, 0, 5, 9, 1, 4],
    [1, 0, 4, 0, 0, 6, 8, 2, 3],
    [2, 3, 9, 0, 0, 0, 5, 6, 0]))
# example of valid solution for reference
valid_solution = np.array([
    [8, 2, 7, 1, 5, 4, 3, 9, 6],
    [9, 6, 5, 3, 2, 7, 1, 4, 8],
    [3, 4, 1, 6, 8, 9, 7, 5, 2],
    [5, 9, 3, 4, 6, 8, 2, 7, 1],
    [4, 7, 2, 5, 1, 3, 6, 8, 9],
    [6, 1, 8, 9, 7, 2, 4, 3, 5],
    [7, 8, 6, 2, 3, 5, 9, 1, 4],
    [1, 5, 4, 7, 9, 6, 8, 2, 3],
    [2, 3, 9, 8, 4, 1, 5, 6, 7]
])


def is_goal(board):
    if board.__contains__(0):
        return False
    # check rows validity
    for row in board:
        if sorted(row) != solved_row_col:
            return False
    # check columns validity
    for row in board.transpose():
        if sorted(row) != solved_row_col:
            return False
    # check 3X3 sub grids
    for x in range(0, 7, 3):
        for y in range(0, 7, 3):
            temp = np.array(board[x:x + 3, y:y + 3])
            if sorted(temp.flatten()) != solved_row_col:
                return False
    return True


def used_in_row(board, index, number):
    if number in board[index[0], :]:
        return True
    else:
        return False


def used_in_col(board, index, number):
    if number in board[:, index[1]]:
        return True
    else:
        return False


def used_in_grid(board, index, number):
    grid_x_test = index[0] - index[0] % 3
    grid_y_test = index[1] - index[1] % 3
    sub_grid = board[grid_x_test:grid_x_test+3, grid_y_test:grid_y_test+3]
    if number in sub_grid:
        return True
    else:
        return False


def is_safe(board, index, number):
    if not used_in_row(board, index, number) and \
        not used_in_col(board, index, number) and \
            not used_in_grid(board, index, number):
        return True
    else:
        return False


def solve(board):
    ind = np.unravel_index(np.argmin(board, axis=None), board.shape)
    if not board.__contains__(0) and is_goal(board):
        return True
    for i in range(1, 10):
        if is_safe(board, ind, i) and board[ind] == 0:
            board[ind] = i
            if solve(board):
                return True
            board[ind] = 0
    return False


# Test code
if solve(sample_board):
    print(sample_board)
else:
    print('No Solution Can Be Found - Board Is Unsolvable')
